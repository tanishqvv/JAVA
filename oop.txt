OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time.

Java Classes/Objects
Java is an object-oriented programming language.
Everything in Java is associated with classes and objects, along with its attributes and methods. For example: in real life, a car is an object. 
The car has attributes, such as weight and color, and methods, such as drive and brake.
A Class is like an object constructor, or a "blueprint" for creating objects.


The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.

We divide modifiers into two groups:

->Access Modifiers - controls the access level
->Non-Access Modifiers - do not control access level, but provides other functionality


1)Access Modifier
1.1) For classes, you can use either public or default:
}public	: The class is accessible by any other class
}default	:The class is only accessible by classes in the same package. 
        This is used when you don't specify a modifier.

1.2)For attributes, methods and constructors, you can use the one of the following:
}public	:The code is accessible for all classes
}private :The code is only accessible within the declared class
}default :The code is only accessible in the same package. This is used when you don't specify a modifier. 
}protected	:The code is accessible in the same package and subclasses.


2)Non-Access Modifiers
2.1)For classes, you can use either final or abstract:
}final	The class cannot be inherited by other classes
}abstract	The class cannot be used to create objects 
            To access an abstract class, it must be inherited from another class. 

2.2)For attributes and methods, you can use the one of the following:
}final	Attributes and methods cannot be overridden/modified

}static	Attributes and methods belongs to the class, rather than an object.

}abstract :	Can only be used in an abstract class, and can only be used on methods. 
            The method does not have a body, for example abstract void run();. 
            The body is provided by the subclass (inherited from)

}transient :Attributes and methods are skipped when serializing the object containing them

}synchronized :Methods can only be accessed by one thread at a time

}volatile :The value of an attribute is not cached thread-locally, and is always read from the "main memory"




